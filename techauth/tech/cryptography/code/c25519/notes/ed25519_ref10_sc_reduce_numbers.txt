
>>> bin(27742317777372353535851937790883648493)
'0b10100110111101111100111011110101000101111011110011100110101100101100000010010011000110001101001011100111101011101001111101101'

Let q0 = 10100110111101111100111011110101000101111011110011100110101100101100000010010011000110001101001011100111101011101001111101101


(1) Note that (q0 - 2**126) == -q0
python:
bin(27742317777372353535851937790883648493 - 2**126)
'-0b101011001000010000011000100001010111010000100001100011001010011010011111101101100111001110010110100011000010100010110000010011'


(2) Find the 2's complement of q0
i.  Convert the 125-bit number q0 to a 126-bit number with a leading zero.
	q0_126 = 010100110111101111100111011110101000101111011110011100110101100101100000010010011000110001101001011100111101011101001111101101
ii. Obtain the 1's complement of q0_126
	101011001000010000011000100001010111010000100001100011001010011010011111101101100111001110010110100011000010100010110000010010
iii. 2's complement number, therefore
	nq0 = 101011001000010000011000100001010111010000100001100011001010011010011111101101100111001110010110100011000010100010110000010011

Break nq0 into six 21-bit limbs:

101011001000010000011 000100001010111010000 100001100011001010011 010011111101101100111 001110010110100011000 010100010110000010011
         l5                     l4                    l3                   l2                    l1                    l0

l0 = 666643
l1 = 470296
l2 = 654183
l3 = -997805 == 1099347 - 2**21
l4 = 136657  == 136656  + 1
l5 = -683901 == 1413251 - 2**21

limbs = [666643, 470296 * (2**21), 654183 * (2**42), -997805 * (2**63), 136656 * (2**84), -683901 * (2**105)]
assert(sum(limbs) == -27742317777372353535851937790883648493)


